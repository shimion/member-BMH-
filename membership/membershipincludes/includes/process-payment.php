<?php
	if(isset($_POST['action']) && $_POST['action'] == 'stripe' && wp_verify_nonce($_POST['stripe_nonce'], 'stripe-nonce')) {
		
		// load the stripe libraries
		require_once('lib/Stripe.php');
		
		$amount = base64_decode($_POST['amount']) * 100;
		
		// retrieve the token generated by stripe.js
		$token = $_POST['stripeToken'];

		// check if we are using test mode
		$secret_key = "sk_test_4aS8pwdhs2XXGchadyyhgp4Y";
		
		Stripe::setApiKey($secret_key);

		if(isset($_POST['recurring']) && $_POST['recurring'] == 'yes') { // process a recurring payment
		
			$plan_id = strip_tags(trim($_POST['plan_id']));
		
			// recurring payment setup will go here
			try {			
				$customer = Stripe_Customer::create(array(
						'card' => $token,
						'plan' => $plan_id,
						'email' => strip_tags(trim($_POST['email']))
					)
				);	
				
				// redirect on successful recurring payment setup
				$redirect = add_query_arg('payment', 'paid', $_POST['redirect']);
				
			} catch (Exception $e) {
				// redirect on failure
				$redirect = add_query_arg('payment', 'failed', $_POST['redirect']);
			}
		
		} else { // process a one-tiome payment
		
			// attempt to charge the customer's card
			try {
				$charge = Stripe_Charge::create(array(
						'amount' => $amount, // amount in cents
						'currency' => 'usd',
						'card' => $token
					)
				);
				// redirect on successful payment
				$redirect = add_query_arg('payment', 'paid', $_POST['redirect']);
				
			} catch (Exception $e) {
				// redirect on failed payment
				$redirect = add_query_arg('payment', 'failed', $_POST['redirect']);
			}
		}	
		// redirect back to our previous page with the added query variable
		wp_redirect($redirect); exit;
	}
